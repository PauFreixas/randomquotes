{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["NEW_QUOTE","settings","store","Redux","state","action","type","quote","author","Provider","ReactRedux","connect","getRandomQuote","data","Math","floor","random","length","Presentational","props","api_called","twitterHref","tumblrHref","getNewQuote","bind","console","log","this","$","ajax","done","response","JSON","parse","aux","setState","text","replace","randomQuote","id","className","title","rel","target","href","onClick","React","Container","dispatch","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.11e8bec0.chunk.js","sourcesContent":["import './App.css';\nimport * as Redux from 'redux';\nimport * as React from 'react';\nimport * as ReactRedux from 'react-redux';\nimport $ from 'jquery';\n\n\nconst NEW_QUOTE = 'NEW_QUOTE';\n\nconst settings = {\n    \"async\": true,\n    \"crossDomain\": true,\n    \"url\": \"https://type.fit/api/quotes\",\n    \"method\": \"GET\"\n}\n\nconst getNewQuote = (quote, author) => {\n    return {\n        type: NEW_QUOTE,\n        quote: quote,\n        author: author\n    }\n};\n\nconst quoteReducer = (state = [], action) => {\n    switch (action.type) {\n        case NEW_QUOTE:\n            return [\n                ...state,\n                action.quote,\n                action.author\n            ];\n        default:\n            return state;\n    }\n};\n\nconst store = Redux.createStore(quoteReducer);\n\nconst Provider = ReactRedux.Provider;\nconst connect = ReactRedux.connect;\n\nfunction getRandomQuote(data) {\n    return data[\n        Math.floor(Math.random() * data.length)\n        ];\n}\n\nclass Presentational extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quote: \"\",\n            author: \"\",\n            data: [],\n            api_called: false,\n            twitterHref: \"\",\n            tumblrHref: \"\"\n        }\n        this.getNewQuote = this.getNewQuote.bind(this)\n\n    }\n\n    componentDidMount(){\n        console.log(this.state.twitterHref);\n        $.ajax(settings).done((response)=> {\n            let data = JSON.parse(response);\n            let aux = getRandomQuote(data)\n\n            this.setState((state) => ({\n                quote: aux.text,\n                author: aux.author,\n                data: data,\n                api_called: true,\n                twitterHref: \"https://twitter.com/intent/tweet?text=\"+aux.text.replace(/\\s+/g, '+')+\"+-+\" + aux.author,\n                tumblrHref: \"https://www.tumblr.com/widgets/share/tool?shareSource=legacy&canonicalUrl=&url=agar.io&posttype=quote&title=&caption=\"+aux.author.replace(/\\s+/g, '+')+\"&content=\"+aux.text.replace(/\\s+/g, '+')\n\n        }));\n        });\n        console.log(this.state.twitterHref);\n    }\n\n    getNewQuote() {\n        let randomQuote = getRandomQuote(this.state.data);\n        this.setState((state) => ({\n            quote: randomQuote.text,\n            author: randomQuote.author,\n            data: this.state.data,\n            api_called: true,\n            twitterHref: \"https://twitter.com/intent/tweet?text=\"+randomQuote.text.replace(/\\s+/g, '+')+\"+-+\" + randomQuote.author,\n            tumblrHref: \"https://www.tumblr.com/share\"\n        }));\n        console.log(this.state.twitterHref);\n    }\n\n\n    render() {\n        let tumblrAnchor = 0;\n        return (\n            <div id=\"wrapper\">\n                <div id=\"quote-box\">\n                    <div className=\"quote-text\">\n                        <i className=\"fa fa-quote-left\"/>\n                        <span id=\"text\">{this.state.quote}</span>\n                        <i className=\"fa fa-quote-right\"/>\n                    </div>\n                    <div className=\"quote-author\">- <span id=\"author\">{this.state.author}</span></div>\n                    <div className=\"buttons\">\n                        <a\n                            className=\"button\"\n                            id=\"tweet-quote\"\n                            title=\"Tweet this quote!\"\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\"\n                            href={this.state.twitterHref}\n                        >\n                            <i className=\"fa fa-twitter\"></i>\n                        </a>\n                        <a\n                            className=\"button\"\n                            id=\"tumblr-quote\"\n                            title=\"Post this quote on tumblr!\"\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\"\n                            href={this.state.tumblrHref}\n                        >\n                            <i className=\"fa fa-tumblr\"></i>\n                        </a>\n                        <button className=\"button\" id=\"new-quote\" onClick={this.getNewQuote}>New quote</button>\n                    </div>\n                </div>\n                <div className=\"footer\">Inspired by <a href=\"https://codepen.io/hezag/\">hezag</a></div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {quote: state}\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getNewQuote: (quote, author) => {\n            dispatch(getNewQuote(quote, author))\n        }\n    }\n};\n\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Presentational);\n\nfunction App() {\n  return (\n      <Provider store = {store}>\n          <Container/>\n      </Provider>\n);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}