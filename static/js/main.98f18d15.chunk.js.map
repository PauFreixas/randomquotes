{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["NEW_QUOTE","settings","store","Redux","state","action","type","quote","author","Provider","ReactRedux","connect","getRandomQuote","data","Math","floor","random","length","Presentational","props","api_called","getNewQuote","bind","$","ajax","done","response","JSON","parse","aux","console","log","setState","text","randomQuote","this","id","className","title","target","onClick","href","React","Container","dispatch","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAOMA,EAAY,YAEZC,EAAW,CACb,OAAS,EACT,aAAe,EACf,IAAO,8BACP,OAAU,OA2BRC,EAAQC,KAbO,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCACzC,OAAQA,EAAOC,MACX,KAAKN,EACD,MAAM,GAAN,mBACOI,GADP,CAEIC,EAAOE,MACPF,EAAOG,SAEf,QACI,OAAOJ,MAMbK,EAAWC,IACXC,EAAUD,IAEhB,SAASE,EAAeC,GACpB,OAAOA,EACHC,KAAKC,MAAMD,KAAKE,SAAWH,EAAKI,S,IAIlCC,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDf,MAAQ,CACTG,MAAO,GACPC,OAAQ,GACRK,KAAM,GACNO,YAAY,GAEhB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBARJ,E,gEAYC,IAAD,OACfC,IAAEC,KAAKvB,GAAUwB,MAAK,SAACC,GACnB,IAAIb,EAAOc,KAAKC,MAAMF,GAClBG,EAAMjB,EAAeC,GACzBiB,QAAQC,IAAIF,GACZ,EAAKG,UAAS,SAAC5B,GAAD,MAAY,CACtBG,MAAOsB,EAAII,KACXzB,OAAQqB,EAAIrB,OACZK,KAAMA,EACNO,YAAY,W,oCAKT,IAAD,OACNc,EAActB,EAAeuB,KAAK/B,MAAMS,MAC5CsB,KAAKH,UAAS,SAAC5B,GAAD,MAAY,CACtBG,MAAO2B,EAAYD,KACnBzB,OAAQ0B,EAAY1B,OACpBK,KAAM,EAAKT,MAAMS,KACjBO,YAAY,Q,+BAIhB,OACI,sBAAKgB,GAAG,UAAR,UACI,sBAAKA,GAAG,YAAR,UACI,sBAAKC,UAAU,aAAf,UACI,mBAAGA,UAAU,qBACb,sBAAMD,GAAG,OAAT,SAAiBD,KAAK/B,MAAMG,QAC5B,mBAAG8B,UAAU,yBAEjB,sBAAKA,UAAU,eAAf,eAAgC,sBAAMD,GAAG,SAAT,SAAmBD,KAAK/B,MAAMI,YAC9D,sBAAK6B,UAAU,UAAf,UACI,mBACIA,UAAU,SACVD,GAAG,cACHE,MAAM,oBACNC,OAAO,OAJX,SAMI,mBAAGF,UAAU,oBAEjB,mBACIA,UAAU,SACVD,GAAG,eACHE,MAAM,6BACNC,OAAO,SAJX,SAMI,mBAAGF,UAAU,mBAEjB,wBAAQA,UAAU,SAASD,GAAG,YAAYI,QAASL,KAAKd,YAAxD,6BAGR,sBAAKgB,UAAU,SAAf,yBAAoC,mBAAGI,KAAK,4BAAR,6B,GAlEvBC,aAoFvBC,EAAYhC,GAZM,SAACP,GACrB,MAAO,CAACG,MAAOH,MAGQ,SAACwC,GACxB,MAAO,CACHvB,YAAa,SAACd,EAAOC,GACjBoC,EA/GQ,SAACrC,EAAOC,GACxB,MAAO,CACHF,KAAMN,EACNO,MAAOA,EACPC,OAAQA,GA2GKa,CAAYd,EAAOC,QAKtBG,CAA6CO,GAUhD2B,MARf,WACE,OACI,cAACpC,EAAD,CAAUP,MAASA,EAAnB,SACI,cAACyC,EAAD,OChIKG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.98f18d15.chunk.js","sourcesContent":["import './App.css';\nimport * as Redux from 'redux';\nimport * as React from 'react';\nimport * as ReactRedux from 'react-redux';\nimport $ from 'jquery';\n\n\nconst NEW_QUOTE = 'NEW_QUOTE';\n\nconst settings = {\n    \"async\": true,\n    \"crossDomain\": true,\n    \"url\": \"https://type.fit/api/quotes\",\n    \"method\": \"GET\"\n}\n\n\n\n\nconst getNewQuote = (quote, author) => {\n    return {\n        type: NEW_QUOTE,\n        quote: quote,\n        author: author\n    }\n};\n\nconst quoteReducer = (state = [], action) => {\n    switch (action.type) {\n        case NEW_QUOTE:\n            return [\n                ...state,\n                action.quote,\n                action.author\n            ];\n        default:\n            return state;\n    }\n};\n\nconst store = Redux.createStore(quoteReducer);\n\nconst Provider = ReactRedux.Provider;\nconst connect = ReactRedux.connect;\n\nfunction getRandomQuote(data) {\n    return data[\n        Math.floor(Math.random() * data.length)\n        ];\n}\n\nclass Presentational extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quote: \"\",\n            author: \"\",\n            data: [],\n            api_called: false\n        }\n        this.getNewQuote = this.getNewQuote.bind(this)\n\n    }\n\n    componentDidMount(){\n        $.ajax(settings).done((response)=> {\n            let data = JSON.parse(response);\n            let aux = getRandomQuote(data)\n            console.log(aux);\n            this.setState((state) => ({\n                quote: aux.text,\n                author: aux.author,\n                data: data,\n                api_called: true\n            }));\n        });\n    }\n\n    getNewQuote() {\n        let randomQuote = getRandomQuote(this.state.data);\n        this.setState((state) => ({\n            quote: randomQuote.text,\n            author: randomQuote.author,\n            data: this.state.data,\n            api_called: true\n        }));\n    }\n    render() {\n        return (\n            <div id=\"wrapper\">\n                <div id=\"quote-box\">\n                    <div className=\"quote-text\">\n                        <i className=\"fa fa-quote-left\"/>\n                        <span id=\"text\">{this.state.quote}</span>\n                        <i className=\"fa fa-quote-right\"/>\n                    </div>\n                    <div className=\"quote-author\">- <span id=\"author\">{this.state.author}</span></div>\n                    <div className=\"buttons\">\n                        <a\n                            className=\"button\"\n                            id=\"tweet-quote\"\n                            title=\"Tweet this quote!\"\n                            target=\"_top\"\n                        >\n                            <i className=\"fa fa-twitter\"></i>\n                        </a>\n                        <a\n                            className=\"button\"\n                            id=\"tumblr-quote\"\n                            title=\"Post this quote on tumblr!\"\n                            target=\"_blank\"\n                        >\n                            <i className=\"fa fa-tumblr\"></i>\n                        </a>\n                        <button className=\"button\" id=\"new-quote\" onClick={this.getNewQuote}>New quote</button>\n                    </div>\n                </div>\n                <div className=\"footer\">Inspired by <a href=\"https://codepen.io/hezag/\">hezag</a></div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {quote: state}\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getNewQuote: (quote, author) => {\n            dispatch(getNewQuote(quote, author))\n        }\n    }\n};\n\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Presentational);\n\nfunction App() {\n  return (\n      <Provider store = {store}>\n          <Container/>\n      </Provider>\n);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}