{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["NEW_QUOTE","settings","store","Redux","state","action","type","quote","author","Provider","ReactRedux","connect","getRandomQuote","data","Math","floor","random","length","Presentational","props","api_called","twitterHref","tumblrHref","getNewQuote","bind","console","log","this","$","ajax","done","response","JSON","parse","aux","setState","text","replace","randomQuote","id","className","title","rel","target","href","onClick","React","Container","dispatch","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bfd76d2c.chunk.js","sourcesContent":["import './App.css';\r\nimport * as Redux from 'redux';\r\nimport * as React from 'react';\r\nimport * as ReactRedux from 'react-redux';\r\nimport $ from 'jquery';\r\n\r\n\r\nconst NEW_QUOTE = 'NEW_QUOTE';\r\n\r\nconst settings = {\r\n    \"async\": true,\r\n    \"crossDomain\": true,\r\n    \"url\": \"https://type.fit/api/quotes\",\r\n    \"method\": \"GET\"\r\n}\r\n\r\nconst getNewQuote = (quote, author) => {\r\n    return {\r\n        type: NEW_QUOTE,\r\n        quote: quote,\r\n        author: author\r\n    }\r\n};\r\n\r\nconst quoteReducer = (state = [], action) => {\r\n    switch (action.type) {\r\n        case NEW_QUOTE:\r\n            return [\r\n                ...state,\r\n                action.quote,\r\n                action.author\r\n            ];\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst store = Redux.createStore(quoteReducer);\r\n\r\nconst Provider = ReactRedux.Provider;\r\nconst connect = ReactRedux.connect;\r\n\r\nfunction getRandomQuote(data) {\r\n    return data[\r\n        Math.floor(Math.random() * data.length)\r\n        ];\r\n}\r\n\r\nclass Presentational extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            quote: \"\",\r\n            author: \"\",\r\n            data: [],\r\n            api_called: false,\r\n            twitterHref: \"\",\r\n            tumblrHref: \"\"\r\n        }\r\n        this.getNewQuote = this.getNewQuote.bind(this)\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log(this.state.twitterHref);\r\n        $.ajax(settings).done((response)=> {\r\n            let data = JSON.parse(response);\r\n            let aux = getRandomQuote(data)\r\n\r\n            this.setState((state) => ({\r\n                quote: aux.text,\r\n                author: aux.author,\r\n                data: data,\r\n                api_called: true,\r\n                twitterHref: \"https://twitter.com/intent/tweet?text=\"+aux.text.replace(/\\s+/g, '+')+\"+-+\" + aux.author,\r\n                tumblrHref: \"https://www.tumblr.com/widgets/share/tool?shareSource=legacy&canonicalUrl=&url=agar.io&posttype=quote&title=&caption=\"+aux.author.replace(/\\s+/g, '+')+\"&content=\"+aux.text.replace(/\\s+/g, '+')\r\n\r\n        }));\r\n        });\r\n        console.log(this.state.twitterHref);\r\n    }\r\n\r\n    getNewQuote() {\r\n        let randomQuote = getRandomQuote(this.state.data);\r\n        this.setState((state) => ({\r\n            quote: randomQuote.text,\r\n            author: randomQuote.author,\r\n            data: this.state.data,\r\n            api_called: true,\r\n            twitterHref: \"https://twitter.com/intent/tweet?text=\"+randomQuote.text.replace(/\\s+/g, '+')+\"+-+\" + randomQuote.author,\r\n            tumblrHref: \"https://www.tumblr.com/share\"\r\n        }));\r\n        console.log(this.state.twitterHref);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"wrapper\">\r\n                <div id=\"quote-box\">\r\n                    <div className=\"quote-text\">\r\n                        <i className=\"fa fa-quote-left\"/>\r\n                        <span id=\"text\">\r\n\r\n                        {this.state.quote}\r\n\r\n                        </span>\r\n                        <i className=\"fa fa-quote-right\"/>\r\n                    </div>\r\n                    <div className=\"quote-author\">- <span id=\"author\">{this.state.author}</span></div>\r\n                    <div className=\"buttons\">\r\n                        <div className = \"shareButtons\">\r\n                          <a\r\n                              className=\"button\"\r\n                              id=\"tweet-quote\"\r\n                              title=\"Tweet this quote!\"\r\n                              rel=\"noopener noreferrer\"\r\n                              target=\"_blank\"\r\n                              href={this.state.twitterHref}\r\n                          >\r\n                              <i className=\"fa fa-twitter\"></i>\r\n                          </a>\r\n                          <a\r\n                              className=\"button\"\r\n                              id=\"tumblr-quote\"\r\n                              title=\"Post this quote on tumblr!\"\r\n                              rel=\"noopener noreferrer\"\r\n                              target=\"_blank\"\r\n                              href={this.state.tumblrHref}\r\n                          >\r\n                              <i className=\"fa fa-tumblr\"></i>\r\n                          </a>\r\n                        </div>\r\n                        <button className=\"button\" id=\"new-quote\" onClick={this.getNewQuote}>New quote</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"footer\">Inspired by <a href=\"https://codepen.io/hezag/\">hezag</a></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {quote: state}\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getNewQuote: (quote, author) => {\r\n            dispatch(getNewQuote(quote, author))\r\n        }\r\n    }\r\n};\r\n\r\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Presentational);\r\n\r\nfunction App() {\r\n  return (\r\n      <Provider store = {store}>\r\n          <Container/>\r\n      </Provider>\r\n);\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}